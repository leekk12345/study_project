<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	<!-- AOP설정을 통한 자동적인 Proxy 객체 생성을 위해 AspectJ 라이브러리를 이용해서  Proxy객체를 생성 -->
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
	
	<!-- Mybatis의 기존 로그보다 자세히 보여줌 -->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="net.sf.log4jdbc.sql.jdbcapi.DriverSpy"></property>
		<property name="url" value="jdbc:log4jdbc:mysql://127.0.0.1:3306/book_ex?useSSL=false"></property>
		<property name="username" value="N17481"></property>
		<property name="password" value="1111"></property>
	</bean>	
	
	<!-- DB연결, SQL실행을 담당하는 중요한 객체 --> 
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:/mybatis-config.xml"></property>
		<property name="mapperLocations" value="classpath:mappers/**/*Mapper.xml"></property>
	</bean>
	
	<!-- 트랜잭션 매니저 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!-- @Transactional 애노테이션 이용한 트랜잭션 관리가 가능 -->
	<tx:annotation-driven />
	
	<!-- mybatis-spring에서 제공하는 SqlSessionTemplate: 
	Mybatis의 SqlSession인터페이스를 구현한 클래스로 DB연결과 작업 후 연결 종료를 자동수행, 트랜잭션 관리, 쓰레드 처리의 안정성을 보장 --> 
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate" destroy-method="clearCache">
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>
	</bean>
	
	<!-- XML방식으로 AOP 기능 설정 시 사용 (현재는 어노테이션으로 AOP 기능 설정한 상태) -->
	<aop:config></aop:config>
	
	<!-- persistence 패키지를 자동 인식 : 하기 패키지 내 @Repository 어노테이션 설정된 클래스를 스캔하여 스프링의 빈으로 등록 -->
	<context:component-scan base-package="org.zerock.persistence"></context:component-scan>
	<context:component-scan base-package="org.zerock.service"></context:component-scan>
	<context:component-scan base-package="org.zerock.aop"></context:component-scan>
    		
</beans>